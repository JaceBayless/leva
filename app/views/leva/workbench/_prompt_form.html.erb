<%= form_with(model: prompt, url: workbench_path(prompt), method: :patch, local: false, class: "bg-gray-800 rounded-lg shadow-lg p-6", data: { controller: "prompt-form" }) do |form| %>
  <div class="mb-4">
    <%= form.label :name, class: "block text-sm font-semibold mb-2 text-indigo-300" %>
    <%= form.text_field :name, class: "w-full bg-gray-700 text-white p-3 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none", data: { action: "input->prompt-form#autoSave" } %>
  </div>
  <div class="mb-4">
    <%= form.label :version, class: "block text-sm font-semibold mb-2 text-indigo-300" %>
    <%= form.number_field :version, class: "w-full bg-gray-700 text-white p-3 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none", data: { action: "input->prompt-form#autoSave" } %>
  </div>
  <div class="mb-4">
    <%= form.label :system_prompt, class: "block text-sm font-semibold mb-2 text-indigo-300" %>
    <%= form.text_area :system_prompt, rows: 5, class: "w-full bg-gray-700 text-white p-3 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none", data: { action: "input->prompt-form#autoSave" } %>
  </div>
  <div class="mb-4">
    <%= form.label :user_prompt, class: "block text-sm font-semibold mb-2 text-indigo-300" %>
    <%= form.text_area :user_prompt, rows: 5, class: "w-full bg-gray-700 text-white p-3 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none", data: { action: "input->prompt-form#autoSave" } %>
  </div>
  <div id="form-status" class="mb-4 text-center" data-prompt-form-target="status"></div>
<% end %>
<script>
  (() => {
    const application = Stimulus.Application.start()

    application.register("prompt-form", class extends Stimulus.Controller {
      static targets = ["status"]

      connect() {
        this.timeout = null
        this.debounceTime = 1000 // 1 second debounce
        this.lastSavedContent = this.formContent()
      }

      autoSave() {
        clearTimeout(this.timeout)
        this.timeout = setTimeout(() => {
          const currentContent = this.formContent()
          if (currentContent !== this.lastSavedContent) {
            this.submitForm()
          } else {
            this.showStatus("No changes to save", "text-gray-500")
          }
        }, this.debounceTime)
      }

      submitForm() {
        const form = this.element
        const formData = new FormData(form)

        this.showStatus("Saving...", "text-yellow-500")

        fetch(form.action, {
          method: form.method,
          body: formData,
          headers: {
            "Accept": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
          },
        })
        .then(response => response.json())
        .then(data => {
          if (data.status === "success") {
            this.showStatus("Changes saved successfully", "text-green-500")
            this.lastSavedContent = this.formContent()
          } else {
            this.showStatus(`Error: ${data.errors.join(", ")}`, "text-red-500")
          }
        })
        .catch(error => {
          console.error("Error:", error)
          this.showStatus("Error saving changes", "text-red-500")
        })
      }

      showStatus(message, className) {
        this.statusTarget.textContent = message
        this.statusTarget.className = `mb-4 text-center ${className}`
        setTimeout(() => {
          this.statusTarget.textContent = ""
          this.statusTarget.className = "mb-4 text-center"
        }, 3000)
      }

      formContent() {
        return JSON.stringify(Object.fromEntries(new FormData(this.element)))
      }
    })
  })()
</script>